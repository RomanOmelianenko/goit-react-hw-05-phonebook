{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","components/Filter/Filter.js","components/Header/Header.js","components/Logo/logo.svg","components/Logo/Logo.js","components/ShowModal/ShowModalWarning.js","components/App.js","index.js"],"names":["module","exports","ContactForm","state","name","number","handleChange","e","target","value","setState","handleSubmit","preventDefault","props","onAddContact","className","styles","TaskEditor","onSubmit","this","TaskEditor_label","TaskEditor_input","type","placeholder","autoComplete","autoFocus","onChange","TaskEditor_button","Component","ContactList","contacts","onRemoveContact","TransitionGroup","component","map","contact","CSSTransition","timeout","classNames","onClick","id","Filter","onChangeFilter","Header","Logo","src","logo","alt","ShowModalWarning","App","filter","modalWarning","addContact","task","addName","includes","inputNumber","Number","length","alert","uuidv4","prevState","changeFilter","getVisibleContacts","toLowerCase","removeContact","contactId","prevProps","localStorage","setItem","JSON","stringify","setTimeout","prevContacts","getItem","parse","visibleContacts","in","appear","unmountOnExit","stage","ReactDom","render","document","querySelector"],"mappings":"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","file":"static/js/main.05300ed6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"TaskEditor\":\"ContactForm_TaskEditor__lnHX6\",\"TaskEditor_label\":\"ContactForm_TaskEditor_label__1-I6U\",\"TaskEditor_input\":\"ContactForm_TaskEditor_input__zUXdL\",\"TaskEditorinput\":\"ContactForm_TaskEditorinput__1CG5c\",\"TaskEditor_button\":\"ContactForm_TaskEditor_button__2Cjd0\"};","import React, { Component } from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport styles from \"./ContactForm.module.css\";\r\n\r\nclass ContactForm extends Component {\r\n    static propTypes = {\r\n        name: PropTypes.string,\r\n        number: PropTypes.string,\r\n        onAddContact: PropTypes.func.isRequired\r\n    };\r\n    \r\n    state = {\r\n        name: \"\",\r\n        number: \"\",\r\n    };\r\n\r\n    handleChange = (e) => {\r\n        const { name, value } = e.target;\r\n        this.setState({\r\n            [name]: value,\r\n        });\r\n    };\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        this.props.onAddContact({ ...this.state });\r\n\r\n        this.setState({ name: \"\", number: \"\" });\r\n    };\r\n  \r\n    render() {\r\n        return (\r\n            <form\r\n                className={styles.TaskEditor}\r\n                onSubmit={this.handleSubmit}>\r\n                <label\r\n                    className={styles.TaskEditor_label}>\r\n                    Name\r\n                        <input\r\n                            className={styles.TaskEditor_input}\r\n                            type=\"text\"\r\n                            name=\"name\"\r\n                            placeholder=\"Your name\"\r\n                            autoComplete=\"off\"\r\n                            autoFocus=\"on\"\r\n                            value={this.state.name}\r\n                            onChange={this.handleChange}\r\n                        />\r\n                </label>\r\n\r\n                <label\r\n                    className={styles.TaskEditor_label}>\r\n                    Number\r\n                    <input\r\n                        className={styles.TaskEditor_input}\r\n                        type=\"text\"\r\n                        name=\"number\"\r\n                        placeholder=\"Your number\"\r\n                        autoComplete=\"off\"\r\n                        value={this.state.number}\r\n                        onChange={this.handleChange}\r\n                    />\r\n                </label>\r\n\r\n                <button\r\n                    className={styles.TaskEditor_button}\r\n                    type=\"submit\">\r\n                    Add contact\r\n                </button>\r\n            </form>\r\n        );\r\n    };\r\n};\r\n\r\nexport default ContactForm;\r\n","import React from \"react\";\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\r\nimport PropTypes from 'prop-types';\r\nimport './ContactList.css';\r\n\r\nfunction ContactList({ contacts, onRemoveContact }) {\r\n\r\n    return (\r\n        <TransitionGroup\r\n            component=\"ul\"\r\n            className=\"TaskList\">\r\n            \r\n            {contacts.map(contact => (\r\n                <CSSTransition\r\n                    key={contact.id}\r\n                    timeout={250}\r\n                    classNames=\"ContactListAppear\"\r\n                    // unmountOnExit\r\n                >\r\n                    <li\r\n                        className=\"TaskList_item\"\r\n                        /*key={contact.id}*/>\r\n                        {contact.name}: {contact.number}\r\n                        {\r\n                            <button\r\n                                className=\"TaskList_button\"\r\n                                type=\"button\"\r\n                                name=\"delete\"\r\n                                onClick={() => onRemoveContact(contact.id)}\r\n                            >\r\n                                x\r\n                            </button>\r\n                        }\r\n                    </li>\r\n                </CSSTransition>\r\n            ))}\r\n        </TransitionGroup>\r\n    );\r\n    \r\n};\r\n\r\nContactList.propTypes = {\r\n    contacts: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            id: PropTypes.string.isRequired,\r\n            name: PropTypes.string.isRequired,\r\n            number: PropTypes.string.isRequired,\r\n    })),\r\n}\r\n\r\nexport default ContactList;","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport './Filter.css';\r\n\r\nfunction Filter({ value, onChangeFilter }) {\r\n    return (\r\n        <div className=\"Filter\">\r\n            <h2 className=\"FilterName\">Find contacts by name</h2>\r\n            <input className=\"FilterInput\"\r\n                type=\"text\"\r\n                placeholder=\"Enter name\"\r\n                value={value}\r\n                onChange={(e) => onChangeFilter(e.target.value)}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nFilter.propTypes = {\r\n    value: PropTypes.string,\r\n    onChangeFilter: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Filter;","import React from 'react';\r\nimport './Header.css';\r\n\r\nfunction Header() {\r\n  return (\r\n    <h1 className=\"HeaderName\">Phonebook</h1>\r\n  );\r\n}\r\n\r\nexport default Header;","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\r\nimport './Logo.css';\r\n\r\nfunction Logo() {\r\n  return (\r\n    // <div className=\"App\">\r\n    //   <header className=\"App-header\">\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n    //   </header>\r\n    // </div>\r\n  );\r\n}\r\n\r\nexport default Logo;","import React from 'react';\r\nimport './ShowModalWarning.css';\r\n\r\nconst ShowModalWarning = () => (\r\n    <div\r\n        className=\"Modal\">\r\n        <p className=\"Modal-message\">\r\n            Contact already exist!\r\n        </p>\r\n    </div>\r\n);\r\n\r\nexport default ShowModalWarning;\r\n","import React, { Component } from \"react\";\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport PropTypes from 'prop-types';\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport ContactForm from \"./ContactForm/ContactForm\";\r\nimport ContactList from \"./ContactList/ContactList\";\r\nimport Filter from \"./Filter/Filter\";\r\nimport Header from './Header/Header';\r\nimport Logo from './Logo/Logo';\r\nimport ShowModalWarning from './ShowModal/ShowModalWarning';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n\r\n static propTypes = {\r\n    contacts: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            id: PropTypes.string,\r\n            name: PropTypes.string,\r\n            number: PropTypes.number\r\n        })\r\n    ),\r\n    filter: PropTypes.string,\r\n    modalWarning: PropTypes.bool\r\n    };\r\n\r\n    state = {\r\n        contacts: [\r\n            // { id: \"id-1\", name: \"Rosie Simpson\", number: \"459-12-56\" },\r\n            // { id: \"id-2\", name: \"Hermione Kline\", number: \"443-89-12\" },\r\n            // { id: \"id-3\", name: \"Eden Clements\", number: \"645-17-79\" },\r\n            // { id: \"id-4\", name: \"Annie Copeland\", number: \"227-91-26\" },\r\n        ],\r\n        filter: \"\",\r\n        modalWarning: false\r\n    };\r\n    \r\n    componentDidUpdate(prevProps, prevState) {\r\n        \r\n        const { contacts, modalWarning } = this.state;\r\n\r\n        if (prevState.contacts !== contacts) {\r\n            localStorage.setItem('contacts', JSON.stringify(contacts))\r\n        };\r\n\r\n        if (prevState.modalWarning !== modalWarning) {\r\n            setTimeout(() => { this.setState({ modalWarning: false }) }, 2000)\r\n        }\r\n    };\r\n\r\n    componentDidMount() {\r\n        \r\n        const prevContacts = localStorage.getItem('contacts');\r\n        \r\n        if (prevContacts !== null) {\r\n            this.setState({\r\n                contacts: JSON.parse(prevContacts)\r\n            });\r\n        };\r\n    };\r\n\r\n    addContact = task => {\r\n        const addName = this.state.contacts\r\n            .map((contact) => contact.name)\r\n            .includes(task.name);\r\n\r\n        const inputNumber = Number(task.number)\r\n\r\n        if (addName) {\r\n            this.setState({ modalWarning: true });\r\n        } else if (task.name.length === 0) {\r\n            alert(\"Field 'Name' must be filled!\");\r\n        } else if (task.number.length === 0) {\r\n            alert(\"Field 'Number' must be filled!\")\r\n        } else if (!inputNumber) {\r\n            alert(\"Insert the number\")\r\n        } else {\r\n            const contact = {\r\n                ...task,\r\n                id: uuidv4(),\r\n            };\r\n\r\n            this.setState(prevState => ({\r\n                contacts: [...prevState.contacts, contact],\r\n            }));\r\n        };\r\n    };\r\n\r\n    changeFilter = (filter) => {\r\n        this.setState({ filter });\r\n    };\r\n\r\n    getVisibleContacts = () => {\r\n        const { contacts, filter } = this.state;\r\n\r\n        return contacts.filter(contact =>\r\n            contact.name.toLowerCase().includes(filter.toLowerCase())\r\n        );\r\n    };\r\n\r\n    removeContact = (contactId) => {\r\n        this.setState((prevState) => {\r\n          return {\r\n              contacts: prevState.contacts.filter(({ id }) => id !== contactId),\r\n            };\r\n      });\r\n  };\r\n\r\n    render() {\r\n        const { filter, contacts, modalWarning } = this.state;\r\n\r\n        const visibleContacts = this.getVisibleContacts();\r\n\r\n        return (\r\n            <div className=\"Wrapper\">\r\n\r\n                <CSSTransition\r\n                    in={true}\r\n                    appear={true}\r\n                    timeout={500}\r\n                    classNames=\"HeaderAppear\"\r\n                    unmountOnExit\r\n                >\r\n                {stage => {\r\n                    // console.log(stage);\r\n                    return (\r\n                        <div className=\"Header\">\r\n                            <Header />\r\n                            <CSSTransition\r\n                                in={stage === 'entered'}\r\n                                timeout={500}\r\n                                classNames=\"LogoAppear\"\r\n                                unmountOnExit\r\n                            >\r\n                                <Logo />\r\n                            </CSSTransition>\r\n                        </div>\r\n                    )\r\n                }}\r\n                </CSSTransition>\r\n                    <ContactForm\r\n                    onAddContact={this.addContact}\r\n                />\r\n\r\n                <CSSTransition\r\n                    in={contacts.length > 1}\r\n                    timeout={250}\r\n                    classNames=\"FilterAppear\"\r\n                    unmountOnExit\r\n                >\r\n                    <Filter\r\n                        value={filter}\r\n                        onChangeFilter={this.changeFilter}\r\n                    />\r\n                </CSSTransition>\r\n                \r\n                <CSSTransition\r\n                    in={contacts.length > 0}\r\n                    timeout={250}\r\n                    classNames=\"ContactsAppear\"\r\n                    unmountOnExit\r\n                >\r\n                    <h2 className=\"ContactsName\">\r\n                        Contacts\r\n                    </h2>\r\n                </CSSTransition>\r\n                \r\n                <CSSTransition\r\n                    in={visibleContacts.length > 0}\r\n                    timeout={250}\r\n                    classNames=\"ContactListApp\"\r\n                    // unmountOnExit\r\n                >\r\n                    <ContactList\r\n                        contacts={visibleContacts}\r\n                        onRemoveContact={this.removeContact}\r\n                    />\r\n                </CSSTransition>\r\n\r\n                <CSSTransition\r\n                    in={modalWarning}\r\n                    timeout={250}\r\n                    classNames=\"ShowModalAppear\"\r\n                    unmountOnExit\r\n                >\r\n                    <ShowModalWarning />\r\n                </CSSTransition>\r\n               \r\n            </div>\r\n        );\r\n    };\r\n};\r\n\r\nexport default App;","import React from 'react';\nimport ReactDom from 'react-dom';\nimport App from './components/App';\n\nReactDom.render(<App />, document.querySelector('#root'));"],"sourceRoot":""}